function [y1] = PG_Cp(x1)
%PG_CP neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 05-Feb-2019 22:02:08.
% 
% [y1] = PG_Cp(x1) takes these arguments:
%   x = 2xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [243.2;0.005081];
x1_step1.gain = [0.0250312891113892;0.040004065213107];
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.012096430856931963;1.151593379721159;-0.066072679432582798;0.75344439454889633;-1.2523801958385907;0.11554642173599135;0.11013096945606141;-0.56371602430161893;0.60221474378015849];
IW1_1 = [-0.022931872162026815 0.17816392738910988;-0.23065656474704954 0.41391405743353105;0.41595230225681118 -0.32143490671594854;0.37328080502423933 0.30587470040464138;0.1499931665370163 0.50771623345329664;-0.30578870025695998 -0.035473923132909126;-0.058610042687645088 -0.17745938257140959;0.19920501591373782 -0.88142612108745744;0.22930927368312334 0.28119102579007399];

% Layer 2
b2 = [0.03002873797831488;0.13754946653057859;0.8808014336333635;-0.069257528840174665;0.067397385413339422;-0.70444207659402758];
IW2_1 = [-0.00018998728852095531 -0.037920119679660705;0.12440718910423225 -0.17916842939428301;0.36378731157013661 0.6201298282851192;0.26546113608521793 0.65813858604712405;0.009197024043149914 -0.18331349098848532;-0.21689989031785298 0.49387032385366098];
LW2_1 = [-0.0027801616669545395 0.02138580589519545 0.010471386945069419 -0.016750833123022318 0.045953974946789586 0.011044018084639857 0.0016060148186466921 -0.0068601058548985495 -0.015401076410384433;-0.024472495818332093 0.17651826944798379 0.060405039799062282 -0.086544825088093733 0.15582690872702273 0.00017774583594886334 -0.020743108597923523 0.0073857601694786819 -0.040717606569627654;0.085833841896878718 0.4727485383915993 0.059229633090738532 0.56717456437862346 -0.57044821372039045 0.0076233618425723551 0.038800887500068361 -0.56769825180057198 0.5460407349287425;0.057695323878973519 0.4998301951521823 -0.22045166740120856 -0.096392833418963916 -0.23295204728045163 -0.24372598488736275 -0.05732704400155883 0.18753136735345902 0.12626701586503655;-0.019516143335260833 0.1674948286524435 0.034334437184161071 -0.13728518976331633 0.32807240342386967 0.019313379942733501 -0.0027956916671676921 0.0030659277870513555 -0.10593730914952679;0.053505044571982449 -0.38821603397555465 0.17414486048591232 0.11881755204262537 -0.42146816068587434 -0.062834210522570891 0.077049777370736719 0.38663626592575118 -0.042385250779455881];

% Layer 3
b3 = 0.40060939643125021;
IW3_1 = [0.1481194755861831 -1.2409621177270544];
LW3_1 = [-0.14674916121830528 1.0657251443700211 0.05016468450460463 -0.46577656798839423 0.91126359649550648 0.086337733698571756 -0.041407551121453931 -0.075898673651043358 -0.34119027755261006];
LW3_2 = [0.074732380311216734 0.33311543095472451 -1.0292944767442258 1.1706247063565316 0.48980413456364064 -1.0993511936128169];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2.10304942166141;
y1_step1.xoffset = 3.34;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = tansig_apply(repmat(b2,1,Q) + IW2_1*xp1 + LW2_1*a1);

% Layer 3
a3 = repmat(b3,1,Q) + IW3_1*xp1 + LW3_1*a1 + LW3_2*a2;

% Output 1
y1 = mapminmax_reverse(a3,y1_step1);
%**************************************************
%Anurag Goyal Added on 2019-02-05
%Making sure that output is bound between training data
if(y1<3.34)
    y1=3.34;
elseif(y1>4.291)
    y1=4.291;
else
    y1=y1;
end
%**************************************************
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
