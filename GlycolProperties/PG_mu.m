function [y1] = PG_mu(x1)
%PG_MU neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 05-Feb-2019 22:05:58.
% 
% [y1] = PG_mu(x1) takes these arguments:
%   x = 2xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [243.2;0.005081];
x1_step1.gain = [0.0250312891113892;0.040004065213107];
x1_step1.ymin = -1;

% Layer 1
b1 = [0.9880445365421392;-1.7109629466098528;0.69805477036447028;-0.38975268461317886;0.55448031419306998;-0.36153692070391191;-0.062025975732909147;-2.4197415945125016;-0.29344821233878909;-0.10741151879661177;-0.079747066480159459;-0.02260590705038535];
IW1_1 = [-0.6416873495487988 0.33924368043933067;0.95436192200150927 -0.37019626054957988;0.64962715619734357 -0.15672657715559141;-0.59326702607790116 -0.034655719292279757;-1.0187737156074372 0.39471034942417732;-0.38072843443541854 -0.82971269163970396;0.36165141245956495 0.15033016077551989;-2.2340271932732576 0.83642856349660477;0.11870990192096628 -0.055469144265608561;0.27602978154765417 0.10602530460082525;-0.28918483888665492 0.17447412754105684;0.097498287135650175 -0.040223007269210027];

% Layer 2
b2 = [1.0918131987645407;0.56783573402801579;0.39045448175346792;0.66016254490138238;-0.25622980299409553;-0.077975865953116077;-0.82573314019016075;0.25453808940795836;0.17317655522250058];
IW2_1 = [-0.71281744054121654 -0.11819697437277595;-0.50209918487717375 0.21213942912121675;-0.53757987792277184 0.039102717431778067;-0.62553573594850009 0.24116766966605993;0.80595336429695763 -0.39379394063177409;1.0253367225000982 -0.61096561914760572;-1.9648047014917946 0.95303735302496395;-0.18324321222391723 0.060912328268762451;-0.78636978734919294 0.38004162724780483];
LW2_1 = [0.20403219388510729 0.35501601811680178 -0.034389859368189328 0.35041522316189533 -0.40274792836323414 -0.4713430872296081 -0.14682220568729315 -1.756857661279807 -0.1272241860429178 -0.15375175299699073 0.068026786641302753 -0.0083600892473923803;-0.10945177395299617 0.54363822610070556 -0.071725613133883759 0.018199257034602703 -0.45140311092677871 0.056152051638796913 -0.04620796750182022 -0.26948604327934456 -0.093891731287279928 -0.064473568885112964 0.058123952147573758 -0.012908290205430842;-0.14788394846519196 -0.1219770707727023 -0.081528684042372915 -0.033136821198386138 0.185001452129643 0.27205148313961292 -0.16154905946635711 0.36333638938248131 -0.1121369924191737 -0.0400674223421029 -0.025582545164342659 -0.02292428707802481;-0.13272957517650152 0.69227221810852391 -0.10761117738108637 0.016912226347548992 -0.57640872333229132 0.039314464631080008 -0.048557687154257907 -0.29222438697555181 -0.11390605888275912 -0.078130390757151766 0.05899434004721027 -0.022174544717879392;-0.056813963623561933 0.2437106239028535 0.42548164740280342 -0.30714262420535621 -0.37888591046737796 0.1392191480432827 0.20687951740536364 -0.39159934468108309 0.026660376659325864 0.15267040739330387 -0.11674184897920863 0.0088976437915392111;0.55612649444469564 0.44029774190822796 0.39082152146721044 -0.2431723347994528 -0.15646437770558519 0.017421021853469165 0.3585174966781069 -0.49558901460108784 0.10367757197104113 0.08532153786836412 -0.14798219807507237 0.0095123673680464309;-0.72800356262116162 1.469188387374551 -0.85403396920300767 0.76057040814603227 -1.2395443453100741 -0.71169006610141428 -0.34226202382835752 -0.17417580098281782 -0.080376660796742383 -0.2494877450721445 0.34133682238424662 -0.079342583558129218;0.0018846299768281874 0.14562374480816265 -0.028750216261577224 0.0098541643866546895 -0.10850108235716416 0.036395006032469229 -0.027413365246036749 -0.038630685226548819 -0.05088066143659277 -0.030323055236082572 0.02445498059242758 -0.0084080444646148448;-0.28402671429454424 0.21015749767939887 -0.28061551707302229 -0.045611523524781407 -0.10705001180822236 0.15567035387750203 -0.15202223461257044 0.12498023438339963 -0.092726184582206425 -0.10227633689846971 0.041861985014143052 0.009694240989693681];

% Layer 3
b3 = 1.5488697650225365;
IW3_1 = [-2.2732198087610724 1.1984086160844927];
LW3_1 = [-0.47890104577239634 1.4240911706307846 -0.44430768795618092 0.31376479025629445 -1.0823270996087415 -0.082279231299585961 -0.32080180014116982 -0.44760141355250715 -0.41896483619866209 -0.27129621117534797 0.25735386723180653 -0.076370741085268423];
LW3_2 = [1.8149931299915489 1.138225730893889 -0.10916048027526976 1.3882782200053496 0.3815390578921396 1.1078990845666705 2.9639502271048137 0.39872882436986995 -0.48759096722388767];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 9.58108616941468;
y1_step1.xoffset = 0.0005554;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = tansig_apply(repmat(b2,1,Q) + IW2_1*xp1 + LW2_1*a1);

% Layer 3
a3 = repmat(b3,1,Q) + IW3_1*xp1 + LW3_1*a1 + LW3_2*a2;

% Output 1
y1 = mapminmax_reverse(a3,y1_step1);
%**************************************************
%Anurag Goyal Added on 2019-02-05
%Making sure that output is bound between training data
if(y1<5.55E-4)
    y1=5.55E-4;
elseif(y1>0.2093)
    y1=0.2093;
else
    y1=y1;
end
%**************************************************
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
